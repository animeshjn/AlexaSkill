/**
 * Created by Animesh Jain on 6/12/2017.
 */
/**
 * Read contents of a specific book here
 *
 * */
'use-strict';
var textProcessor= require('bookReadAnimesh/textprocessor');
var totalLines=0;
var linesPerPage=12;
var currentBookId="";
var booksFound=0;
var currentLine=0;
var MAXCHARS=7500;
var downloadUrl="";
var start=0;
/**
 * To get the download url from the @param name (title) of the book
 * @param accessToken
 * @param name
 * @param request
 * @param response
 * @param extension
 * @param callback
 */
function getBookUrlByName(accessToken,name,request,response,extension,callback){
    var url;
    url=`https://www.googleapis.com/drive/v2/files?access_token=${accessToken}&q=title+%3d+%27${name+""+extension}%27`;
    console.log(url);
    var https=require('https');
    https.get(url,function(res) {
        var body = '';
        res.on('data', function (chunk) {
            body += chunk;
        });
        res.on('end', function () {
            var result = JSON.parse(body);
            var files;
            if (result) {
                var files = [];
                // booksFound=result['items'].length;
              // if(booksFound==0){
              //     return "";
              // }
                //Handle not found :AJ
                // handle error here :AJ
                if(!result['items']||result['items'].length<=0){
                    response.speechText="I cannot find that book. Which book do you want me to open?";
                    response.shouldEndSession=false;
                    response.done();
                }
                else if(result['items'].length>0)
                    if (result['items'][0]['id']) {
                   currentBookId= result['items'][0]['id'];
                    console.log(currentBookId);
                    callback(result['items'][0]['downloadUrl']);
                }
                 //console.log(fileId);
                // download(result['items'][0]['downloadUrl'],contentLogger);
            }
            else {
                callback();
                console.log("Problem getting download URL")
            }
        });
    });
}
/**
 * Returns textual data from the google drive url
 * @param url downloadUrl
 * @param accessToken of the authorized app
 * @returns {string} raw content extracted from file
 */
function getRawContentFromUrl(url,accessToken,callback){
    var driveinterface= require('bookReadAnimesh/drive-intertface');
    driveinterface.downloadFileContents(url,accessToken,callback);

}

function getBookDataByName(accessToken,name,request,response,session,extension,callbackForArray)
{
getBookUrlByName(accessToken,name,request,response,extension,callWithUrl);
function callWithUrl(downloadUrl){
    if(downloadUrl){

    getRawContentFromUrl(downloadUrl,accessToken,manipulateContent);
    }
    else{

        response.speechText="I cannot find that book. Which book do you want me to open?";
        response.shouldEndSession=false;
        response.done();

    }
    function manipulateContent(bookText){
     var contentArray={};
     if(bookText){
        contentArray=textProcessor.contentArray(bookText);
        totalLines=contentArray.length;
        console.log("Lines in this book: "+totalLines);
        callbackForArray(contentArray,bookText);
     }
    }
  }
}

//Read Whole book
module.exports.readWholeBook=function readWholeBook(accessToken,name,request,response,session,extension,callback,speed){
    getBookDataByName(accessToken,name,request,response,session,extension,callbackForArray);
    function callbackForArray(arrayText,bookText){
        console.log("call back received");
        var temp="";
        console.log("starting loop");
        if(session.attributes.currentLine){
           start=parseInt(JSON.stringify(session.attributes.currentLine));
           currentLine=parseInt(JSON.stringify(session.attributes.currentLine));
        }
        if(start<0){
            start=0;
        }
        if(currentLine<0){
            currentLine=0;
        }
        //Read out the contents of the book
        var charcounter=0;
        response.speechText+=`<prosody rate=${speed}>`;
        for(var i=start;i<(linesPerPage+start);i++){
            charcounter+=arrayText[i].length;
            if(charcounter<=MAXCHARS){
            response.speechText+=" "+arrayText[i];
            currentLine++;
            session.attributes.currentLine=currentLine;
            }
            else{
                break;
                console.log("Character Overflow");
            }
        }
        console.log("loop ended");
        response.speechText+=`</prosody>`;
        response.speechText+="I am finished with this page, say: 'Continue', to keep reading;";
        response.shouldEndSession=false;
        response.done();
        console.log("response done");
        callback(session);
    }
    // response.speechText+="I have finished reading the book, What you want me to do next ?";
    // response.shouldEndSession=false;
    // sendBack(response);
    // response.done();
    //   for(let i=0;i<wholeContent.length;i++){
    //        response.speechText+=" "+wholeContent[i];
    //       currentLine++;
    //       session.attributes.currentLine=currentLine;
    //   }

}

exports.readFromChapter=function readFromChapter(chapterNumber,accessToken,name,request,response,session,extension,callbackLast,speed){
    getBookDataByName(accessToken,name,request,response,session,extension,callbackForArray);
    function callbackForArray(arrayText,bookText){
        //getChapterPhrase
        textProcessor.getChapterName(bookText,chapterNumber,callForChapterPhrase);
        //getChapter start Index
        function callForChapterPhrase(chapterPhrase){
            console.log(chapterPhrase);
            textProcessor.getChapterDataStartIndex(arrayText, chapterPhrase, callbackAfterChapter);
        }

    }

    function callbackAfterChapter(chaptersArray,index)
    {
        console.log("Index: "+index);
        var temp="";
        //if index not found
        if(!index||!chaptersArray)
        {
            response.speechText+="I cannot read that chapter, make sure the book is in right format provided by <say-as interpret-as='spell-out'>AIMVA</say-as>. "
            response.speechText+="To continue with reading where we left off, say; Continue."
            response.shouldEndSession=false;
            response.done();
            return;
        }
        //say some error , wrong format //
        //
        //if(session.attributes.)
        start=index;

        console.log("starting loop");
        if(start<0){
            start=0;
        }
        if(currentLine<0){
            currentLine=0;
        }
        currentLine=index;
        var charcounter=0;
        response.speechText+=`<prosody rate=${speed}>`;
        for(var i=start;i<(linesPerPage+start);i++){
            charcounter+=chaptersArray[i].length;
            if(charcounter<=MAXCHARS){
            response.speechText+=" "+chaptersArray[i];
            currentLine++;
            session.attributes.currentLine=currentLine;
            }
            else{
                break;
                console.log("Character Overflow");
            }
        }
        console.log("loop ended");
        response.speechText+=`</prosody>`;
        response.speechText+="I am finished with this page, say: 'Continue', to keep reading;";
        response.shouldEndSession=false;
        response.done();
        console.log("response done");
        callbackLast(session);
    }
}


